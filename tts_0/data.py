# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00-data.ipynb.

# %% auto 0
__all__ = ['def_device', 'get_dls', 'DataLoaders', 'to_device', 'to_cpu', 'collate_dict', 'collate_device']

# %% ../nbs/00-data.ipynb 2
from datasets.dataset_dict import DatasetDict
import torchvision.transforms.functional as TF
from datasets import load_dataset
from operator import itemgetter
from typing import Tuple, Mapping, Sequence
import torch
from torch import Tensor
from torch.utils.data import DataLoader, Dataset, default_collate

# %% ../nbs/00-data.ipynb 3
def get_dls(train_ds: Dataset, valid_ds: Dataset, 
            bs: int, **kwargs) -> Tuple[DataLoader, DataLoader]:
    return (DataLoader(train_ds, bs, shuffle=True, **kwargs),
            DataLoader(valid_ds, bs, shuffle=False, **kwargs))

class DataLoaders:
    def __init__(self, *dls: DataLoader) -> None:
        self.train, self.valid = dls[:2]
        
    @classmethod
    def from_dd(cls, dd: DatasetDict, bs: int, **kwargs):
        fn = collate_dict(dd['train'])
        dls = get_dls(*dd.values(), bs=bs, collate_fn=fn, **kwargs)
        
        return cls(*dls)

# %% ../nbs/00-data.ipynb 5
def_device = "mps" if torch.backends.mps.is_available() else "cuda" if torch.cuda.is_available() else "cpu"

# %% ../nbs/00-data.ipynb 6
def to_device(x: Tensor, device: str = def_device) -> Tensor:
    if isinstance(x, Tensor): 
        return x.to(device)
        
    if isinstance(x, Mapping): 
        return {key: value.to(device) for key, value in x.items()}
        
    return type(x)(to_device(item) for item in x)

def to_cpu(x: Tensor) -> Tensor:
    if isinstance(x, Mapping):
        return {key: to_cpu(value) for key, value in x}
    
    if isinstance(x, Sequence):
        return type(x)(to_cpu(item) for item in x)
        
    result = x.detach().cpu()
    
    return result.float() if result.dtype == torch.float16 else result

# %% ../nbs/00-data.ipynb 7
def collate_dict(ds):
    get = itemgetter(*ds.features)
    
    def _fn(b):
        return get(default_collate(b))
    
    return _fn

def collate_device(b):
    return to_device(default_collate(b))
